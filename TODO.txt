* PUT & DELETE requests
  * Support DELETE, PUT (basically update I think)


  *** Support the `Connection: keep-alive` flag  by specifying the `Content-Length` flag (allows for multiple send() calls since the browser knows how much
     data will be sent) -> this will need multithreading to handle multiple clients.

  ** Add TLS encryption to the sockets.

  ** Support mutliple clients using thread pools?

  * Make an example REST API.

  *** Authentication
      - Add support for running ALTER on the session authentication table to add or 
        remove fields if it already exists.
      - Move away from using a 256 digit random number as the SessionID, use
        a proper hashing algorithm with some Salt (e.g. SHA256).
      - Hash user login data in the database.

  *** Add cookies.
      - Once we support TLS make sure that all cookies have the secure flag set 
        by default.

  *** Turn global_route_callback_array into a Hash Map or use a hashmap containing
      indexes for routes in global_route_callback_array when trying to index a route.

  ** Maybe add redirect routes inside callback functions it will just find an existing
      route entry the global_route_callback_array and if there is one if it will call their
      callback function.

  ** Make the templating more advanced by implementing functionality like
       url_for() in Flask.

  * Go through the TODO's in the project.
  * Remove unnecessary `printf` in the project and unnecessary `[INFO]` messages 
    (e.g. the SQL commands which are being executed).

  - Only let the user run the HTTP_TemplateText() and HTTP_TemplateTextFromFile()
    functions from files which are text file (images and videos should not be allowed
    to be templated).
    - Could check if `file_contents.count == strlen(file_contents.string)` in 
      HTTP_GetFileContents() if it is then we know it is probably a text file
      otherwise it will probably be a video or an image.


* Arena 
  * Allocate and deallocate pages as necessary (default page size should be 
    64MB instead of 4K).
  * When resetting the current_offset pointer of the arena check if the amount
    of data we are removing is greater than a page in which case we will deallocate
    the page.

* Create a new function for HTTP_RedirectRoute();

* Support other HTTP response codes.
 
* We will need to need to implement local variables for each route in the database
e.g. DATABASE LAYOUT:
TABLE NAME (THE ROUTE) -> FILE AT ROUTE, (OPTIONAL) LOCAL VARIABLES


- Make it so that we can change the value of variables which only exist on another
  webpage and only send that webpage when the user wants it (in other words don'that
  return the data at the POST request route if it does not match the route it is 
  currently in).

* Make it so that any variables which do not have a definition in a file 
  are automatically removed from data_to_send.
* Allow users to specify what HTTP methods a certain route will allow (e.g. by creating
  a seperate struct for a route).

* Support parsing lists in json.
* Add cookies

- Make server logs easier to read and add colour
- Abstract sockets methods so that we can support Windows and Linux.
- Add SSL/TLS encryption.
- Logging data to the database.
- Add some security checks to make sure that the message being sent is actually a 
  HTTP request.
- Support sending videos
- Fill out the rest of the socket functions in platform.h and test them to make
  sure they work on Linux as well.

NOTES:
* Could probably just seperate the query string from the actual route first and then
  pass them into the GET and POST handler functions seperately instead of having to
  find them manually in each one.
