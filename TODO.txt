

* PUT & DELETE requests
  * Support DELETE, PUT (basically update I think)
  * Be able to modify and delete local variables for a route if they exist.

  - Migrate to using a database for storing file paths, and global and local
    variables for each route.
  - Use function pointers for routes to allow the user to generate their own 
    responses.
  - Provide useful functions to allow the user to do what they want to do when
    creating a response.

  *** Turn the functionality of the ParsePOSTRequest() into a set of useful
    methods to allow the user to implement the functionality on their own.

  *** Allow for HTTP_HandleRoute() to accept a list of different methods and 
    future calls to HTTP_HandleRoute() with the same the methods and routes
    will override the previous ones.

  * Remove the cjson_arena_hooks immediately after we support databases and
    that means we probably won't need the permanent_arena either and can return
    back to just using a global_arena.

  * Create a function allow the user to make several headers which will
    automatically be seperated with \r\n.

* Arena 
  * Allocate and deallocate pages as necessary (default page size should be 
    64MB instead of 4K).
  * When resetting the current_offset pointer of the arena check if the amount
    of data we are removing is greater than a page in which case we will deallocate
    the page.

* Create a new function for HTTP_RedirectRoute();

* Support other HTTP response codes.
 
* We will need to need to implement local variables for each route in the database
e.g. DATABASE LAYOUT:
TABLE NAME (THE ROUTE) -> FILE AT ROUTE, (OPTIONAL) LOCAL VARIABLES


- Make it so that we can change the value of variables which only exist on another
  webpage and only send that webpage when the user wants it (in other words don'that
  return the data at the POST request route if it does not match the route it is 
  currently in).

* Make it so that any variables which do not have a definition in a file 
  are automatically removed from data_to_send.
* Allow users to specify what HTTP methods a certain route will allow (e.g. by creating
  a seperate struct for a route).

* Support parsing lists in json.

- Support the `Connection: keep-alive` flag  by specifying the `Content-Length` flag (allows for multiple send() calls since the browser knows how much
  data will be sent) -> this will need multithreading to handle multiple clients.
- Make server logs easier to read and add colour
- Abstract sockets methods so that we can support Windows and Linux.
- Add SSL/TLS encryption.
- Logging data to the database.
- Add some security checks to make sure that the message being sent is actually a 
  HTTP request.
- Support sending videos
- Fill out the rest of the socket functions in platform.h and test them to make
  sure they work on Linux as well.

NOTES:
* Could probably just seperate the query string from the actual route first and then
  pass them into the GET and POST handler functions seperately instead of having to
  find them manually in each one.
